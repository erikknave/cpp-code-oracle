
package templates

import (
	"fmt"
	"github.com/erikknave/go-code-oracle/types"
)

templ SearchPage(searchResults *[]types.SearchableDocument, errorStr string) {
	@Layout() {
		@SearchView(searchResults, errorStr)
	}
}

func generateHrefString(result types.SearchableDocument) string {
	switch result.Type {
	case "repository":
		return fmt.Sprintf("/repository?user=test&dbid=%d", result.Dbid)
	case "directory":
		return fmt.Sprintf("/directory?user=test&dbid=%d", result.Dbid)
	case "file":
		return fmt.Sprintf("/file?user=test&dbid=%d", result.Dbid)
	default:
		return fmt.Sprintf("/repository?user=test&dbid=%d", result.Dbid)
	}
}

func generateTypeName(typeStr string) string {
	switch typeStr {
	case "repository":
		return "Repository"
	case "directory":
		return "Directory"
	case "file":
		return "File"
	case "container":
		return "Container"
	default:
		return "Unknown"
	}
}

templ searchResultNameRow(result types.SearchableDocument) {
	if result.ContainerType != "variable" {
		if result.Type == "entity" {
			<div><span class="font-bold">Entity</span>: { result.Path }: { result.Name }</div>
		} else if result.Type == "container" {
			<div><span class="font-bold">Container ({ result.ContainerType })</span>: { result.Signature }</div>
		} else {
			<div><span class="font-bold">{ generateTypeName(result.Type) }</span>: <a href={ templ.URL(generateHrefString(result)) }>{ result.Path }</a></div>
		}
	}
}

templ SearchView(searchResults *[]types.SearchableDocument, errorStr string) {
	<div id="page-container">
		<div class="text-white text-xs h-[100vh] max-w-[100vw] flex flex-col justify-center align-center bg-gray-800">
			<div class="  h-[80%] flex justify-center align-center px-4 py-2">
				<div id="search-container" class=" overflow-auto w-[90vw] border rounded border-white p-2">
					if errorStr != "" {
						<div class="p-2 border border-white rounded">
							<div><span class="font-bold">Error</span>: { errorStr }</div>
						</div>
						<div class="p-1"></div>
					}
					for _, result := range *searchResults {
						if result.ContainerType != "variable" {
							<div class="p-2 border border-white rounded">
								@searchResultNameRow(result)
								<div><span class="font-bold">Summary</span>: <md-block>{ FormatSummaryString(&result) }</md-block></div>
								<div><span class="font-bold">Latest authors</span>: { FormatAuthorString(result.Authors) }</div>
								<div><span class="font-bold">Last updated</span>: { FormatDateString(result.LatestCommit) }</div>
							</div>
							<div class="p-1"></div>
						}
					}
				</div>
			</div>
			<div class=" flex justify-center align-center px-4 py-2">
				@SearchPrompt()
			</div>
		</div>
	</div>
}

templ SearchViewWrapper(searchResults *[]types.SearchableDocument, errorStr string) {
	<div id="page-container" hx-swap-oob="outerHTML">
		@SearchView(searchResults, errorStr)
	</div>
}
